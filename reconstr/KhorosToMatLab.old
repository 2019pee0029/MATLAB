#!/usr/bin/perl
@lines = `cat $ARGV[0]`;
@fname = split /[\/\.]/,$ARGV[0];
$fname = @fname[-2];
@paramtype = (); @paramtags = (); @paramname = (); @paramdesc = (); @defaults = (); @optional = (); @minval = (); @maxval = ();
@inputtags = (); @inputname = (); @inputdesc = (); @inputdef = (); 
@outputtags = (); @outputname = (); @outputdesc = (); @outputdef = (); 
foreach (@lines) {
# print "separating: $_\n";
 @fields = split;
 @jfields = ();
 $instring=0;
 $astring="";
# rejoin fields that were protected by '
 foreach (@fields) {
   if ($instring == 0)
      {
        if (/^\s*'/)
        {
           $instring=1;
           $astring=$_;
           if (/^\s*'.+'\s*$/)
           {
              $instring=0;
              push @jfields,$astring;
           }
        }
        else
        {
           push @jfields,$_;
        }
      }
   else
      {
        $astring= "$astring $_";
        if (/'\s*/)
        {
           $instring=0;
           push @jfields,$astring;
        }
      }
 }
if (@jfields[0] eq '-M')
  {
    $progdescr = @jfields[5];
  }
if (@jfields[0] eq '-t')
  {
   push @paramtype, 'Toggle(0/1)';
   push @paramtags, @jfields[-1];
   push @paramname, @jfields[-3];
   push @paramdesc, @jfields[-2];
   push @minval, 0;
   push @maxval, 0;
   push @defaults, @jfields[-5];
 }
if (@jfields[0] eq '-i')
  {
   push @paramtype, 'Integer';
   push @paramtags, @jfields[-1];
   push @paramname, @jfields[-3];
   push @paramdesc, @jfields[-2];
   push @minval, @jfields[-8];
   push @maxval, @jfields[-7];
   push @defaults, @jfields[-6];
 }
if (@jfields[0] eq '-f')
  {
   push @paramtype, 'Double';
   push @paramtags, @jfields[-1];
   push @paramname, @jfields[-3];
   push @paramdesc, @jfields[-2];
   push @minval, @jfields[-9];
   push @maxval, @jfields[-8];
   push @defaults, @jfields[-7];
 }
if (@jfields[0] eq '-I')
  {
   push @inputtags, @jfields[-1];
   push @inputname, @jfields[-3];
   push @inputdesc, @jfields[-2];
   push @inputdef, @jfields[-4];
   push @paramtype, 'InputFile';
   push @paramtags, @jfields[-1];
   push @paramname, @jfields[-3];
   push @paramdesc, @jfields[-2];
   push @minval, @jfields[3];
   push @maxval, @jfields[3];
   push @defaults, '\'__input\'';
 }
if (@jfields[0] eq '-O')
  {
   push @outputtags, @jfields[-1];
   push @outputname, @jfields[-3];
   push @outputdesc, @jfields[-2];
   push @outputdef, @jfields[-4];
   push @paramtype, 'OutputFile';
   push @paramtags, @jfields[-1];
   push @paramname, @jfields[-3];
   push @paramdesc, @jfields[-2];
   push @minval, @jfields[3];
   push @maxval, @jfields[3];
   push @defaults, '\'__output\'';
 }
if (@jfields[0] eq '-R')
  {
   $requiredParams = "$requiredParams @jfields[-1]";
  }

# $j=0; foreach (@jfields) { print "item $j: $_\n"; $j += 1; }
}

# now it's time to generate the MatLab program
print "% K$fname $progdescr\n";
print "% This MatLab function was automatically generated by a converter from the Khoros $fname.pane file\n";
print "% Parameters: \n";
$i=0;
foreach (@paramtags) {
print "% @paramtype[$i] : @paramname[$i] $_, default: @defaults[$i] : @paramdesc[$i]\n";
$i += 1;
}
$i=0;
print "% Ordered Inputs (can be omitted from the trailing end)\n";
foreach (@inputtags) {
print "% @inputname[$i] $_, default: @inputdef[$i] : @inputdesc[$i]\n";
$i += 1;
}
$i=0;
print "% Ordered Outputs (can be omitted from the trailing end)\n";
foreach (@outputtags) {
print "% @outputname[$i] $_, default: @outputdef[$i] : @outputdesc[$i]\n";
$i += 1;
}

print "% Example: ";
if ($#outputtags >= 1) {print "[";}
$i=0;
foreach (@outputtags)
{
   print "$_";
   if ($i < $#outputtags)
      {print ", ";}
   $i += 1;
}
if ($#outputtags >= 1) {print "] =";}
print " K$fname(";
$i=0;
if ($#inputtags >= 1) {print "{";}
foreach (@inputtags)
{
   print "$_";
   if ($i < $#inputtags)
      {print ", ";}
   $i += 1;
}
if ($#inputtags >= 1) {print "}";}
print ", {";
$i=0;
foreach (@paramtags) {
   if (@defaults[$i] == '__input' || @defaults[$i] == '__output') { print "\'$_\',\'dummytext\'"; }
   else {print "\'$_\',@defaults[$i]";}
   if ($i < $#paramtags)
      {print ";";}
   $i += 1;
}
print "})\n\n";

print "function varargout = K$fname(Inputs,arglist)\n";
print "if nargin ~=2\n  error('Usage: [out1,..] = K$fname(Inputs,arglist).');\nend\n";
print "if size(arglist,2)~=2\n  error('arglist must be of form {''ParameterTag1'',value1;''ParameterTag2'',value2}')\n end\n";

print "narglist={";
$i=0;
foreach (@paramtags) {
   print "\'$_\', @defaults[$i]";
   if ($i < $#paramtags)
      {print ";";}
   $i += 1;
}
print "};\n";

print "maxval={";
$i=0;
foreach (@maxval) {
   print "$_";
   if ($i < $#maxval)
      {print ",";}
   $i += 1;
}
print "};\n";

print "minval={";
$i=0;
foreach (@minval) {
   print "$_";
   if ($i < $#minval)
      {print ",";}
   $i += 1;
}
print "};\n";

print "% identify the input arrays and assign them to the arguments as stated by the user\n";
print "if ~iscell(Inputs)
Inputs = {Inputs};
end\n";

print "arglist\nnarglist\nminval\nmaxval\n";

print "nextinput=1; nextoutput=1;
  for ii=1:size(arglist,1)
  for jj=1:size(narglist,1)
   if strcmp(arglist{ii,1},narglist{jj,1})
     if strcmp(narglist{jj,2}, '__input')
      if (nextinput > size(Inputs)) 
        error(['Input ' narglist{jj,1} ' has no corresponding input!']); 
      end
      narglist{jj,2} = Inputs{nextinput};
      nextinput = nextinput + 1;
     elseif strcmp(narglist{jj,2}, '__output')
      if (nextoutput > nargout) 
        error(['Output nr. ' narglist{jj,1} ' is not present in the assignment list of outputs !']); 
      end
      narglist{jj,2} = 'OK';
      nextoutput = nextoutput + 1;
     elseif isstr(arglist{ii,2})
      narglist{jj,2} = arglist{ii,2};
     else
        if (minval{jj} ~= 0 | maxval{jj} ~= 0)
          if (minval{jj} == 1 & maxval{jj} == 1 & arglist{ii,2} < 0)
            error(['Argument ' arglist{ii,1} ' must be bigger or equal to zero!']);
          elseif (minval{jj} == -1 & maxval{jj} == -1 & arglist{ii,2} > 0)
            error(['Argument ' arglist{ii,1} ' must be smaller or equal to zero!']);
          elseif (minval{jj} == 2 & maxval{jj} == 2 & arglist{ii,2} <= 0)
            error(['Argument ' arglist{ii,1} ' must be bigger than zero!']);
          elseif (minval{jj} == -2 & maxval{jj} == -2 & arglist{ii,2} >= 0)
            error(['Argument ' arglist{ii,1} ' must be smaller than zero!']);
          end
        elseif (arglist{ii,2} < minval{jj})
          error(['Argument ' arglist{ii,1} ' must be bigger than ' num2str(minval{jj})]);
        elseif (arglist{ii,2} > maxval{jj})
          error(['Argument ' arglist{ii,1} ' must be smaller than ' num2str(maxval{jj})]);
        end
     end
     narglist{jj,2} = arglist{ii,2};
   end
   end
end\n";
print "nextoutput\nnargout\n
if (nextoutput > 1 & (nextoutput-1) ~= nargout)
          error('Number of outputs does not correspond to number of output tags in argument list!');
end";

print "% match the remaining inputs to the unused arguments and test for missing required inputs
 for jj=1:size(narglist,1)
     if strcmp(narglist{jj,2}, '__input')
      if (minval{jj} == 0)
        if (nextinput > size(Inputs)) 
           error(['Required input ' narglist{jj,1} ' has no corresponding input in the list!']); 
        else
          narglist{jj,2} = Inputs{nextinput};
          nextinput = nextinput + 1;
        end
      else
        if (nextinput <= size(Inputs)) 
          narglist{jj,2} = Inputs{nextinput};
          nextinput = nextinput + 1;
        end;
      end;
     else 
     if strcmp(narglist{jj,2}, '__output')
      if (minval{jj} == 0)
        if (nextoutput > nargout) 
           error(['Required output ' narglist{jj,1} ' is not stated in the assignment list!']); 
        else
          narglist{jj,2} = 'OK';
          nextoutput = nextoutput + 1;
        end
      else
        if (nextoutput <= nargout) 
          narglist{jj,2} = 'OK';
          nextoutput = nextoutput + 1;
        end;
      end
     end
  end
end\n";

print "Inputs\nnarglist\n";
print "varargout=callKhoros(\'$fname $requiredParams\',Inputs,narglist)\n";
