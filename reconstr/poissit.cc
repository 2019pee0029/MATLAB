// poissit : this program reads in a 3-D datafile and applies a possion multiplicative noise

/*   This file is part of a software package written by 
     Rainer Heintzmann
     Institute of Applied Optics and Information Processing
     Albert Ueberle Strasse 3-5
     69120 Heidelberg
     Tel.: ++49 (0) 6221  549264
     Current Address : Max Planck Inst. for Biophysical Chemistry, Am Fassberg 11, 37077 Goettingen, Germany
     Tel.: ++49 (0) 551 201 1029, e-mail: rheintz@gwdg.de  or rainer@heintzmann.de
     No garantee, whatsoever is given about functionallaty and  savety.
     No warranty is taken for any kind of damage it may cause.
     No support for it is provided !

     THIS IS NOT FREE SOFTWARE. All rights are reserved, and the software is only
     given to a limited number of persons for evaluation purpose !
     Please do not modify and/or redistribute this file or any other files, libraries
     object files or executables of this software package !
*/

#include <iostream>
#include <string>
#include "rawarray.h"
#include "parseargs.h"

// #include <time.h>   // non unix, but limited to seconds
#include <sys/time.h>  // Unix
#include <unistd.h>    // Unix, but gives microseconds

#include "poidev.h"

long rval=-5;       // initvalue of random-generator, can be changed

typedef float ArrayBType;
typedef TArray3d<ArrayBType> TImgArray;

static TImgArray InputImg;


void usage(char * filename)
{
  cerr <<  "usage: " << filename << " [-k] [-s number] [-t] [-i inputfile] [-o outputfile] \n" << flush;
  exit(-1);
}

ArrayBType poissit(ArrayBType val)
{
  return (ArrayBType) poidev((float) val,& rval);
}


int main(int argc, char *argv[])
{ 
int Elements=1,i;
static int INPUTSizeX=32;  // These is the standart size, if raw data is used
static int INPUTSizeY=32;  // 256
static int INPUTSizeZ=32;  // 22

int kflag=0,tflag=0;

string INPUTFileName,OUTPUTFileName;

char ** parg= & argv[1];
argc=0;  // to prevent warning

 while (* parg)
  {
   if (readArg("-k",parg)) {kflag=1;continue;}
   if (readArg("-t",parg)) {tflag=1;continue;}
   if (readArg("-s", & rval, parg)) continue; // change start number
   if (readArg("-i", & INPUTFileName, parg)) continue;
   if (readArg("-o", & OUTPUTFileName, parg)) continue;
   if (readArg("-sX",& INPUTSizeX, parg)) continue;
   if (readArg("-sY",& INPUTSizeY,parg)) continue;
   if (readArg("-sZ",& INPUTSizeZ,parg)) continue;
    usage(argv[0]);
  }

  if (tflag) 
    {
      // time(&rval);  // Non unix, but only seconds
      struct timeval tv;
      struct timezone tz={0,0};
      gettimeofday(&tv,&tz);
      rval = tv.tv_usec;  // Microseconds
    }

  if (rval > 0) rval = 0-rval;

  cout << "Randomizer starts with " << rval << "  \n";

  ofstream to(OUTPUTFileName.c_str());
      
  if (! to )
    {
      cerr << "Couldn't open file " << OUTPUTFileName << " for writing !!\n" << flush;
      exit(-1);
    }
	  
  for (i=0;i<Elements;i++)
  {

  Elements=InputImg.DLoad(kflag,INPUTFileName.c_str(),"Float",
			  & INPUTSizeX,& INPUTSizeY,& INPUTSizeZ,i);

  InputImg.Apply(&poissit);
 
  if (i==0)
    {
      if (kflag)
	{
	  if (kflag) WriteKhorosHeader(& to,"Generated by poissit 1998","Float",INPUTSizeX,INPUTSizeY,INPUTSizeZ,Elements);
	  cerr << "writing file " << OUTPUTFileName << " \n" << flush;
	}
      // else nothing
	
    }

    InputImg.Write(& to);
  }
  to.close();

}
